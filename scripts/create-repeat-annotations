# Chromosome names in our BAM files are different from normal ones.
fix_chromosomes = function (chr)
    sub('^chr', 'CHROMOSOME_', chr)

sys = modules::import('klmr/sys')

sys$run({
    args = sys$cmd$parse(arg('annotation', 'Repeat annotation file'),
                         arg('prefix', 'Output path prefix'))
    library(rtracklayer)
    annotation = import(args$annotation)
    seqlevels(annotation) = fix_chromosomes(seqlevels(annotation))

    repeat_classes = unique(mcols(annotation)$gene_id)

    # For a preliminary analysis, we are going to collapse similar repeat
    # classes — i.e. those with a common prefix name.

    library(stringr)
    library(dplyr)

    merge_prefixes = list(c('CELE', 'CELETC'),
                          c('CEREP', 'CeRep'),
                          c('HAT', 'HATN'),
                          c('HELITRON', 'HELITRONY'),
                          c('TC', 'Tc', 'MARINER', 'MARINCE'),
                          c('PALTA', 'PALTTAA', 'PALTTTAAA')) %>%
        tibble(Prefix = ., CollapseTo = sapply(Prefix, `[[`, 1)) %>%
        tidyr::unnest(Prefix)

    class_prefixes = tibble(Class = repeat_classes) %>%
        mutate(Prefix = str_match(Class, '^[A-Za-z]+')[, 1]) %>%
        left_join(merge_prefixes, by = 'Prefix') %>%
        mutate(Prefix = ifelse(is.na(CollapseTo), Prefix, CollapseTo)) %>%
        select(-CollapseTo)

    for (prefix in unique(class_prefixes$Prefix)) {
        classes = filter(class_prefixes, Prefix == prefix)$Class
        class_annotation = annotation[mcols(annotation)$gene_id %in% classes]
        mcols(class_annotation)$name = make.unique(mcols(class_annotation)$transcript_id)
        export.bed(class_annotation, paste0(args$prefix, tolower(prefix), '.bed'))
    }
})

# vim: ft=r
